/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Fri Jun  6 15:30:04 2025


#ifndef GOOGLEDIALOGFLOWCXCHATBOT_PARAMSPARSER_H
#define GOOGLEDIALOGFLOWCXCHATBOT_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class GoogleDialogFlowCxChatBot.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value | Required | Description                                                      | Notes |
* |:----------:|:--------------:|:------:|:-----:|:-------------:|:--------:|:----------------------------------------------------------------:|:-----:|
* | -          | project        | string | -     | -             | 1        | The name of the Google cloud project the wanted agent belongs to | -     |
* | -          | location       | string | -     | -             | 1        | The world region specified for the wanted agent                  | -     |
* | -          | agent_name     | string | -     | -             | 1        | The name of the agent                                            | -     |
* | -          | language_code  | string | -     | en-US         | 0        | The language code to use for the interaction with the bot        | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device googleDialogFlowCxChatBot --project <mandatory_value> --location <mandatory_value> --agent_name <mandatory_value> --language_code en-US
* \endcode
*
* \code{.unparsed}
* yarpdev --device googleDialogFlowCxChatBot --project <mandatory_value> --location <mandatory_value> --agent_name <mandatory_value>
* \endcode
*
*/

class GoogleDialogFlowCxChatBot_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    GoogleDialogFlowCxChatBot_ParamsParser();
    ~GoogleDialogFlowCxChatBot_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"GoogleDialogFlowCxChatBot"};
    const std::string m_device_name = {"googleDialogFlowCxChatBot"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 2;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    std::string m_provided_configuration;

    const std::string m_project_defaultValue = {""};
    const std::string m_location_defaultValue = {""};
    const std::string m_agent_name_defaultValue = {""};
    const std::string m_language_code_defaultValue = {"en-US"};

    std::string m_project = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::string m_location = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::string m_agent_name = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::string m_language_code = {"en-US"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
    bool getParamValue(const std::string& paramName, std::string& paramValue) const override;
    std::string   getConfiguration() const override;
};

#endif
